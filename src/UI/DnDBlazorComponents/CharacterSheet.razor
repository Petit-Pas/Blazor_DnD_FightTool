@using global::Characters.AbilityScores.Validation
@using global::Characters.DamageAffinities
@using global::Fight.AttackRolls.ArmorClasses
@using global::Characters.AbilityScores
@using System.ComponentModel.DataAnnotations
@using System.Security.Cryptography.X509Certificates
@using global::Characters.AbilityScores
@using global::Characters.AbilityScores.Validation
@using global::Characters.DamageAffinities
@using global::Fight.AttackRolls
@using NeoBlazorphic.StyleParameters
@using Morris.Blazor.Validation;
@using DnDBlazorComponents.Fight.AttackRolls;
<h1>
    Character Sheet
</h1>

<EditForm EditContext="_editContext">
    <Validate />
    @*<DataAnnotationsValidator />*@
    
    <div>
        <ArmorClassEditable ArmorClass="_model.ArmorClass"></ArmorClassEditable>
    </div>


    <div class="character-sheet">
        <div class="character-sheet-header">
        
            <h1> HEADER </h1>

        </div>
        <div class="character-sheet-body">
            
            <div class="m-2">
                <AbilityScoresEditableList Abilities="_model.AbilityScoresCollection"></AbilityScoresEditableList>
            </div>
            <div class="m-2" style="width: 400px">
                <SkillsEditableList Skills="_model.SkillCollection" Abilities="_model.AbilityScoresCollection"></SkillsEditableList>
            </div>
            <h1> BODY </h1>

            <button type="submit">Save</button>

        </div>
        <div>
            <DamageAffinitiesEditableList Affinities="_model.DamageAffinitiesCollection" ></DamageAffinitiesEditableList>
        </div>
    </div>

</EditForm>

@code
{

    protected override void OnInitialized()
    {
        _model = new CharacterDummy();
        _editContext = new EditContext(_model);

        _editContext.OnFieldChanged += (sender, args) => StateHasChanged();
    }

    public CharacterDummy _model;
    public EditContext _editContext;


    public class CharacterDummyValidator : AbstractValidator<CharacterDummy>
    {
        public CharacterDummyValidator()
        {
            RuleFor(x => x.AbilityScoresCollection).SetValidator(new AbilityScoresValidator());
            RuleFor(x => x.Walue).InclusiveBetween(1, 30);
            RuleFor(x => x.ArmorClass).SetValidator(new ArmorClassValidator());
        }

    }
   
    public class CharacterDummy
    {
        public SkillCollection SkillCollection { get; set; } = new SkillCollection();
        public AbilityScoresCollection AbilityScoresCollection { get; set; } = new AbilityScoresCollection();
        public DamageAffinitiesCollection DamageAffinitiesCollection { get; set; } = new DamageAffinitiesCollection();

        public ArmorClass ArmorClass { get; set; } = new();

        public int Walue { get; set; } = 13;

    }
}
