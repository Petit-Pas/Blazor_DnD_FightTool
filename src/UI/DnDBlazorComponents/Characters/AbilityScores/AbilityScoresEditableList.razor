<Card ShadowPosition="ShadowPosition.In" Padding="Spacing._0" TextSelectable="false">
    @if (Abilities != null)
    {
        <div class="characteristic-container">

            @{
                var i = 1;
            }
            @foreach (var abilityScore in Abilities)
            {
                <div class="characteristic-row" style="grid-row: @i;">
                    <IntInput ValidateOnKeyPress="true" @bind-Value="abilityScore.Score" ValidationFor="@(() => abilityScore.Score)">
                        <InputFieldPrefix>
                            <div class="characteristic-label">
                                @abilityScore.ShortName
                            </div>
                        </InputFieldPrefix>
                        <InputFieldSuffix>
                            <div class="characteristic-modifier">
                                @Abilities.GetModifierWithMastery(abilityScore.Name).ModifierString
                            </div>
                        </InputFieldSuffix>
                    </IntInput>
                </div>
                <div class="characterisitc-mastery" style="grid-row: @i;">
                    <CheckBox @bind-IsChecked="@abilityScore.HasMastery" AccentClass="neo-primary"></CheckBox>
                </div>

                i += 1;
            }
            <div class="mastery-bonus">
                <IntInput ValidateOnKeyPress="true" @bind-Value="@Abilities.MasteryBonus" ValidationFor="@(() => @Abilities.MasteryBonus)">
                    <InputFieldPrefix>
                        <div>
                            Mastery bonus
                        </div>
                    </InputFieldPrefix>
                </IntInput>
            </div>
        </div>
    }
</Card>
