@using DnDEntitiesBlazorComponents.DnDEntities.Damage
@using DnDEntitiesBlazorComponents.DnDEntities.Dices.DiceThrows.Components
@using DnDEntitiesBlazorComponents.DnDEntities.Statuses
@using DnDFightTool.Domain.DnDEntities.MartialAttacks
@using Morris.Blazor.Validation
@using SharedComponents.Inputs.Buttons.Actions

@if (Character != null)
{
    <div id="attack-template-collection" class="attack-template-collection-container" style="overflow: auto; height: 100%; padding: 1em;">

        @{
            var i = -1;
        }
        @foreach(var attackTemplate in Character.MartialAttacks.Values)
        {
            var editing = EditContext is not null && ((MartialAttackTemplate)EditContext.Model).Id == attackTemplate.Id;
            i += 1;
            <div id="@("attack-template-card-" + i)" class="attack-template-container @(editing ? "editing" : "")" style="">
                <Card BorderRadius="@_templateBorderRadius" Padding="Spacing._0">
                    @if (!editing)
                    {
                        <!-- Smaller summary card -->
                        <div class="attack-template-summary">
                            <div class="attack-template-name">
                                @attackTemplate.Name
                            </div>
                            
                            @if (EditContext == null)
                            {
                                <CardActionCollection>
                                    <CardActionCollectionElement>
                                        <EditButton SizeInPx="35" OnClick="() => Edit(attackTemplate)" />
                                    </CardActionCollectionElement>
                                    <CardActionCollectionElement>
                                        <DuplicateButton SizeInPx="35" OnClick="() => Duplicate(attackTemplate)" />
                                    </CardActionCollectionElement>
                                    <CardActionCollectionElement>
                                        <DeleteButton SizeInPx="35" OnClick="() => Delete(attackTemplate)" />
                                    </CardActionCollectionElement>
                                </CardActionCollection>
                            }
                        
                            <div class="attack-template-tags">
                                <Card BorderType="NeoBorderType.NeoLightBorder" Shape="BackgroundShape.Concave" Padding="Spacing._1">
                                    <div class="attack-template-tag">
                                        @attackTemplate.Modifiers.GetScoreModifier(Character).ModifierString
                                    </div>
                                </Card>
                                <Card BorderType="NeoBorderType.NeoLightBorder" Shape="BackgroundShape.Concave" Padding="Spacing._1">
                                    <div class="attack-template-tag">
                                        @attackTemplate.Damages.MinimumResult(Character) - @attackTemplate.Damages.MaximumResult(Character)
                                    </div>
                                </Card>
                            </div>
                        </div>
                    }
                    else
                    {

                        <!-- Bigger detailed editable card -->
                        <EditForm EditContext="EditContext">
                            <Validate />
                            <div style="height: 100%;">
                                <MartialAttackTemplateEditable EditContext="EditContext" />

                                <CardActionCollection>
                                    <CardActionCollectionElement>
                                        <CancelButton SizeInPx="35" OnClick="() => CancelEdit()" />
                                    </CardActionCollectionElement>
                                    <CardActionCollectionElement>
                                        <ValidateButton SizeInPx="35" OnClick="() => SaveEdit()" IsEnabled="!EditContext!.GetValidationMessages().Any()" />
                                    </CardActionCollectionElement>
                                </CardActionCollection>
                            </div>
                        </EditForm>
                    }
                </Card>
            </div>
        }

        @if (EditContext == null)
        {
            <ButtonCard BorderRadius="@_templateBorderRadius" Color="ThemeColor.Primary" OnMouseClickCallBack="() => CreateNew()">
                <div class="add-template-button" style="">
                    +
                </div>
            </ButtonCard>
        }

    </div>

}

